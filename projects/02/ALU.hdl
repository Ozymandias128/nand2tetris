// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   Mux16(a=x, b=false, sel=zx, out=zeroXout); // Zero the X input
   Mux16(a=y, b=false, sel=zy, out=zeroYout); // Zero the Y input

   Not16(in=zeroXout, out=zeronotX); // Negate X (Part 1)
   Mux16(a=zeroXout, b=zeronotX, sel=nx, out=negXout); // Negate X (Part 2)

   Not16(in=zeroYout, out=zeronotY); // Negate Y (Part 1)
   Mux16(a=zeroYout, b=zeronotY, sel=ny, out=negYout); // Negate Y (Part 2)

   And16(a=negXout, b=negYout, out=XandY); // x & y (Part 1)
   Add16(a=negXout, b=negYout, out=XplusY); // x + y (Part 1)
   Mux16(a=XandY, b=XplusY, sel=f, out=Fout); // select between (x&y) or (x+y) (Part 2, intermediate step)

   Not16(in=Fout, out=FoutNeg); // Compute negate output (Part 1, intermediate step)
   Mux16(a=Fout, b=FoutNeg, sel=no, out=out, out[0..7]=zrComp1, out[8..15]=zrComp2, out[15]=ng); // Compute negate output (Part 2)

   Or8Way(in=zrComp1, out=zr1); // Use two Or8Ways to compute zr (Part 1/4)
   Or8Way(in=zrComp2, out=zr2); // Use two Or8Ways to compute zr (Part 2/4)
   Or(a=zr1, b=zr2, out=zrr); // Or two Or8Ways to compute zr (Part 3/4)
   Not(in=zrr, out=zr); // negate zrr to compute zr (Or all bits determines if any bits are high, negating gives zr, Part 4/4)
   
 }